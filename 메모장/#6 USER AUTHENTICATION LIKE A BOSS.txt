1. 인증기능을 위한 passport.js
middleware로 사용자 인증을 구현시켜줌. 여기서 인증이란? 브라우저 상에 쿠키를 설정해주면
그 쿠키를 통해서 사용자 id등을 알 수 있고, passport가 브라우저에서 자동으로 쿠키를 가져와서
인증이 완료된 user object를 controller에 넘겨줌
passport 모듈의 장점은 다른 모듈도 지원해준다는거 인스타그램, 트위터, http, 구글, 깃헙 등등
쿠키란? 우리가 브라우저에 저정할 수 있는 것들임
모든 request에 대해서, 백엔드로 전송될 정보들이 담겨있음
cf) passport.js document
passport & passport-local-mongoose 모듈을 사용할 예정


#6.1
1. User.js
UserSchema작성
2. init.js에서 import user.js <= 아직 user.js에 passport가 없는데, 우린 passport-local-mongoose를 쓸테니까 플러그인으로 추가할 예정
3. npm install passport-local-mongoose <= 이게 패스워드설정, 확인 등등 그런 것들을 자동으로 해줌
4. user.js에서 import passport-local-mongoose
5. userSchema에 플러그인 추가
UserSchema.plugin(passportLocalMongoose, {usernameField:email}); <= 어떤 변수를 usernameField로 할지 알려줘야됨
혹시나 usernameField의 변수명을 바꾼다면 이미 코딩된것들을 쓸 수 없음. 본인이 다시 코딩해야됨.
그러므로 usernameField변수명을 그대로 써서 이미 구현된것들을 활용하자

이렇게 usernameField로 email을 설정을 했으면, user를 가지고 여러가지 method를 쓸 수 있게 됨
이런 메소드를 쓸 수 있다고해서 사용자 인증까지 된 건 아님

6. 사용자 인증을 위한 passport.js 파일생성
npm install passport passport-local
passport는 passport이고,
passport-local은 username과 password를 쓰는 사용자 인증 방식(strategy)을 의미
지금은 pasport-local을 설치하고, 나중에 passport-facebook과 passport-github같은 것도 설치함

7. passport.js에서
import passport from "passport";
import User from "./models/User";
passport와 User를 import한 후에 passport.use()함수를 통해 strategy를 사용할텐데,
strategy는 로그인 방식을 의미, 페이스북 혹은 깃헙 등
passport-local-mongoose가 제공하는 strategy를 사용하려고함
usename과 password를 쓰는 상당히 좋은 지름길같은 strategy임. 보통은 좀 복잡한 기능을 구현해야됨
참고) passport.js홈피에서 username&password <<= 여기 참고


#6.2
serialize : '어떤 정보를 쿠키에게 주느냐'를 의미.
지금 웹브라우저(즉, 클라이언트)에 있는 사용자에 대해서 어떤 정보를 가질 수 있느냐
ex) 사용자 ID : 1 뭐 이런거
쿠키에 있는 정보는 자동으로 백엔드 쪽으로 전송되고, 그러면 백엔드에서 사용자ID가 1인 사용자가 누군지 알지
이러한 정보가 쿠키에 저장됨
그리고 serialization은 어떤 field가 쿠키에 포함될 것인지 알려주는 역할도 함
※ 쿠키는 아주 작아야하고, 민감한 정보는 절대로 담지마

deserialize : 어느 사용자인지 어떻게 찾는가?
쿠키의 정보를 어떻게 사용자로 전환하는가를 의미 만약 쿠키를 받아봤는데, id가 1이라면 어떻게할까?

passport.js에서 사용자 인증을 처리할 설정
passport.serializeUser(User.serializeUser()); <= 쿠키에 담을 정보(대부분 유저id를 쿠키에 저장)
passport.deserializeUser(User.deserializeUser()); <= 받은 쿠키를 어떻게 할지에 대한 정보
이렇게 간단할 수 있는 이유는 passport-local-mongoose 덕분임

globalRouter에 postJoin함수 쪽에 패스워드가 맞는지 체크하는 미들웨어를 추가할 예정

사용자를 가입시키고, 로그인 시키기 위해
userController.js에서 import User

User.create()는 생성 <= create의 인자로는 User model에서 name과 email로함
생성시켰으면 등록해야지 User.register(유저객체,패스워드)
User.create대신에 User만으로 변경함, 왜? create는 생성시키고 db에 저장까지함
그래서 이미 db에 존재한 유저를 등록할 수 없는거지

지금까지 한 건
사용자 등록임. 유저를 생성하고 db에 등록하는거 까지했음
등록한 다음에 자동으로 로그인 시켜버리는 것 혹은 로그인 화면으로 보내서 다시 로그인 하라고 하는것
전자가 경험상 좋음


#6.3
가입후 자동로그인을 위해서 join을 처리하는 컨트롤러를 미들웨어로 변경
매개변수에 next를 추가하고, register후에 next()를 추가
로그인을 처리하는 컨트롤러를 만들어야되는데,
postLogin을 수정함 왜? postLogin은 결국 passport의 function될것이고, 그리고
passport는 username과 password를 찾게 되어있음
1. 글로벌라우터 수정
globalRouter.post(routes.join, postJoin, postLogin); <= postJoin으로 유저를 등록시키고 next()함수로 postLogin컨트롤러를 실행
2. import passport from "passport";
3. postLogin컨트롤러 수정
export const postLogin = passport.authenticate("local", {  <= local은 설치한 strategy이름
  failureRedirect: routes.login,
  successRedirect: routes.home,
}); 

※ 지금 passport방식은 username(email)과 password를 찾아보도록 설정됐음

4. 가입 후 홈화면으로 이동하는지 테스트하기전에
미들웨어에서 isAuthenticated:true이러한 부분을 -> req.user || {};로 변경
왜이렇게 할 수 있냐면 passport가 사용자를 로그인 시킬 때 passport는 쿠키나 serialize, deserialize 등의 기능을
다 지원해줌은 물론이고 user가 담긴 object를 request에 올려줌
이렇게 작성해야 template들이 이 user에 접근할 수 있음

5. app.js에서
import passport from "passport"
app.use(morgan("dev"));
app.use(passport.initialize());
app.use(passport.session());
위치에 대한 설명 : 위에서 실행된 쿠키파서로부터 쿠키가 쭉 내려와서 passport는 초기화되고
그 다음엔 passport가 스스로 쿠키를 들여다보고 그 쿠키 정보에 해당하는 사용자를 찾아줌
그리고 passport는 자기가 찾은 사용자를 request의 object. 즉, req.user로 만들어주지!!!
그러면 각 template에 user object를 추가할 수 있음
그예로 header.pug에서
!user.isAuthenticated -> !user로 변경
app.js에서 passport.js 임포트하기

6. 테스트하기
가입에 성공하면 홈화면으로 이동하는지 확인
두둥!! 우리 쿠키가 보이지 않는다. 왜? session을 설치하지않아서
express-session 설치 <= npm install express-session





#6.4
세션 사용을 위한 설정


#6.5
데이터베이스를 사용해서 세션 저장하기
connect-mongo를 써서 session에게 데이터를 MongoStore라는 저장소에 저장하라고 알려줌
npm install connect-mongo@2.0.1

이미 로그인 한 사람이 회원가입 못하게 미들웨어 만듦

passport와 session 덕분에 req.user를 통해서 로그인한 유저를 알 수 있음

비밀번호 변경과 프로필 수정은 로그인 된 상태에서만 가능하도록 미들웨어를 만듦


#6.6
passport-github 설치

깃헙에서 돌아오는 과정,
깃헙으로 보내는 과정


#6.7
깃허브로그인을 위한 route만들기

#6.8
cb함수는 passport에서 제공된 callback함수. passport에서 이 cb(callback함수)를 인증에 성공한 상황에서 호출해야됨











