1. 인증기능을 위한 passport.js
middleware로 사용자 인증을 구현시켜줌. 여기서 인증이란? 브라우저 상에 쿠키를 설정해주면
그 쿠키를 통해서 사용자 id등을 알 수 있고, passport가 브라우저에서 자동으로 쿠키를 가져와서
인증이 완료된 user object를 controller에 넘겨줌
passport 모듈의 장점은 다른 모듈도 지원해준다는거 인스타그램, 트위터, http, 구글, 깃헙 등등
쿠키란? 우리가 브라우저에 저정할 수 있는 것들임
모든 request에 대해서, 백엔드로 전송될 정보들이 담겨있음
cf) passport.js document
passport & passport-local-mongoose 모듈을 사용할 예정


#6.1
1. User.js
UserSchema작성
2. init.js에서 import user.js <= 아직 user.js에 passport가 없는데, 우린 passport-local-mongoose를 쓸테니까 플러그인으로 추가할 예정
3. npm install passport-local-mongoose <= 이게 패스워드설정, 확인 등등 그런 것들을 자동으로 해줌
4. user.js에서 import passport-local-mongoose
5. userSchema에 플러그인 추가
UserSchema.plugin(passportLocalMongoose, {usernameField:email}); <= 어떤 변수를 usernameField로 할지 알려줘야됨
혹시나 usernameField의 변수명을 바꾼다면 이미 코딩된것들을 쓸 수 없음. 본인이 다시 코딩해야됨.
그러므로 usernameField변수명을 그대로 써서 이미 구현된것들을 활용하자

이렇게 usernameField로 email을 설정을 했으면, user를 가지고 여러가지 method를 쓸 수 있게 됨
이런 메소드를 쓸 수 있다고해서 사용자 인증까지 된 건 아님


6. 사용자 인증을 위한 passport.js 파일생성
npm install passport passport-local
passport는 passport이고,
passport-local은 username과 password를 쓰는 사용자 인증 방식(strategy)을 의미
지금은 pasport-local을 설치하고, 나중에 passport-facebook과 passport-github같은 것도 설치함

7. passport.js에서
import passport from "passport";
import User from "./models/User";
passport와 User를 import한 후에 passport.use()함수를 통해 strategy를 사용할텐데,
strategy는 로그인 방식을 의미, 페이스북 혹은 깃헙 등
passport-local-mongoose가 제공하는 strategy를 사용하려고함
usename과 password를 쓰는 상당히 좋은 지름길같은 strategy임. 보통은 좀 복잡한 기능을 구현해야됨
참고) passport.js홈피에서 username&password <<= 여기 참고


#6.2
serialize : 어떤 정보를 쿠키에게 주느냐를 의미. 지금 웹브라우저(즉, 클라이언트)에 있는 사용자에 대해서 어떤 정보를 가질 수 있느냐
※ 쿠키는 아주 작아야하고, 민감한 정보는 절대로 담지마
deserialize : 쿠키의 정보를 어떻게 사용자로 전환하는가를 의미. 어느 사용자인지 어떻게 찾는가? 만약 쿠키를 받아봤는데, id가 1이라면 어떻게할까?

passport.js에서 사용자 인증을 처리할 설정
passport.serializeUser(User.serializeUser());
passport.deserializeUser(User.deserializeUser());
이렇게 간단할 수 있는 이유는 passport-local-mongoose 덕분임

globalRouter에 postJoin함수 쪽에 패스워드를 체크하는 미들웨어를 추가

사용자를 가입시키고, 로그인 시키기 위해 userController.js에서
import user model

user.create는 생성시키고 db에 저장까지 함

#6.3
postJoin컨트롤러를 middleware로 변경
매개변수에 next추가


#6.4
express-session 설치


#6.5
데이터베이스를 사용해서 세션 저장하기
connect-mongo를 써서 session에게 데이터를 MongoStore라는 저장소에 저장하라고 알려줌
npm install connect-mongo@2.0.1

이미 로그인 한 사람이 회원가입 못하게 미들웨어 만듦

passport와 session 덕분에 req.user를 통해서 로그인한 유저를 알 수 있음

비밀번호 변경과 프로필 수정은 로그인 된 상태에서만 가능하도록 미들웨어를 만듦


#6.6
passport-github 설치

깃헙에서 돌아오는 과정,
깃헙으로 보내는 과정


#6.7
깃허브로그인을 위한 route만들기

#6.8
cb함수는 passport에서 제공된 callback함수. passport에서 이 cb(callback함수)를 인증에 성공한 상황에서 호출해야됨











