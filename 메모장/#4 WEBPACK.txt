#4.0
webpack : module bundler
많은 파일들을 가져와서 webpack에게 주면, 완전히 호환되는 static파일들로 변환해서 주는것
1. 설치
npm install webpack webpack-cli / webpack 하나는 파일에서 webpack을 사용하기 위함이고
다른 하나는(webpack-cli)는 터미널에서 webpack을 쓸 수 있게 하기 위함
2. webpack.config.js 생성
3. package.json
start -> dev:server로 변경
"dev:assets": "webpack: 추가
4. webpack.config.js
여기선 최신 js문법을 쓸 수 없음. 예전문법을 써야됨
const config = {};
module.exports = config;
5. assets 폴더생성
안에 js와 scss폴더 생성
6. js폴더안에 main.js생성, scss폴더 안에 styles.scss 생성
7. main.js에서 import styles.scss
8. styles.scss에서 간단한 body{background-color:red;}
9. webpack.config.js에서
const ENTRY_FILE, const OUTPUT_DIR
10. path
node.js에는 파일과 디렉토리 경로를 absolute로 만들어주는 방법이 있음
다시말해, 컴퓨터나 서버에서의 전체 경로를 갖게 되는거지
예) /users/yoo/documents/wetube/assets
이렇게 전체 경로를 나타내자는 건데, path라는 걸로 할 수 있음
path는 node.js에 기본적으로 설치된 패키지
const path = require("path"); <-이렇게 적은건 import path from "path"와 같음
webpack.config.js는 모던 자바스크립트가 아니라서 import를 모름
11. ENTRY_FILE
const ENTRY_FILE = path.resolve(__dirname,"assets","js","main.js")
__dirname은 현재 프로젝트 디렉토리 이름인데, 이건 어디서나 접근 가능한 node.js전역변수
그다음은 경로
12. OUTPUT_DIR
const OUTPUT_DIR = path.join(__dirname, "static"); <= static이라는 폴더로 export
13. config변수에서
entry: ENTRY_FILE, output: OUTPUT_DIR 만 추가하면 끝
14. 실행
npm run dev:assets


#4.1
15. dev:assets 엔트리에
cf) env파일에서 환경설정을 하고, db에서 process.env.MONGO_URL로 사용했었음
이걸 수동으로 직접 설정하는 법. 이걸 왜하냐? mode를 설정하기 위해
WEBPACK_ENV=development 추가
16. "build:assets" 엔트리 추가
"WEBPACK_ENV=production webpack" <= 내 코드를 서버에 올려줌
17. webpack.config.js에서
const MODE = process.env.WEBPACK_ENV; 추가 <= 설정한 거 사용
18. config에
mode: MODE 추가
19. 그러고 나서 실행 npm run dev:assets
20. 오류 'WEBPACK_ENV'은(는) 내부 또는 외부 명령, 실행할 수 있는 프로그램, 또는 배치 파일이 아닙니다.
"dev:assets": "cross-env WEBPACK_ENV=development webpack",
"build:assets": "cross-env WEBPACK_ENV=production webpack"
> npm cache clean --force
> npm i
> npm install -D cross-env
21. 여기까지 했어도 scss에 대한 경고가 뜨는데
webpack.config.js에 config객체에
moduel: {
    rules: [
      {
        test: /\.(scss)$/,
      },
    ],
  },
추가
rules안에서 하는건 webpack에게 파일을 처리하는 방법을 알려주는 역할
22. 앞으로 할 거
처음에는 확장자 scss인 파일을 찾고, 그걸 css로 바꾸고
전체 텍스트 중에 그 css의 텍스트를 추출하고. 추출된 css를 분리된 하나의 파일로 만드는 거지
extract text webpack구글링
23. npm install extract-text-webpack-plugin@next
24. 방금 설치한 plugin을 use
cf) webpack은 config파일에서 아래에서 위로 실행함(반대)
css추출을 쓴 다음에 css변환을 써야 아래에서 위로 실행하니 변환하고 추출함
25. loader: "css-loader",
webpack이 css를 이해할 수 있도록 함
26. loader: "postcss-loader"
sass와 css 호환
27. loader: "sass-loader",
sass에서 시작해서


#4.2








